#!/usr/bin/env python3

# Script to write the substitution file for
# a CAEN 1527 crate A1932 boards
# 

# Defaults to 4 slots of 

#1.  Find the hostname (presumably rpiNN). Use the digits at the end of the host name
#    to determine a (hopefully) unique crate ID.
#2.  Use /tmp/LecroySlotList.txt, which is written when the shim starts
#    to determine which slots are occupied in the mainframe
#3.  Use the crate ID and slot list to make an EPICS substituion file to define all the EPICS records
#4.  Start the lecroy EPICS application using crate ID and signals defined for this crate

import socket
import re
import datetime
import sys

DEFAULTCRATE=0
DEFAULTCRNAMEPREFIX="HAHV"
slotlist = [0, 2, 4, 6]
CHANS=48

HASPRIMARY=True

SUBFILENAME="HVBBHODO.substitutions"

command_codes = {
    "pwonoff": 0x0B,
    "v0set": 0x02,
    "i0set": 0x05,
    "trip": 0x0A,
    "rampup": 0x04,
    "rampdn": 0x03,
    "svmax": 0x0D,
    "enable": 0x01
}

# Default Alarm limits
alarm_limits = {
    "lolo": -50,
    "low": -25,
    "high": 25,
    "hihi": 50
}

cratenum=DEFAULTCRATE
crname = DEFAULTCRNAMEPREFIX

print("Crate number =",cratenum)

# Write out the substitution file

f = open(SUBFILENAME, "w")
today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") #get the data

#print the preamble
print('#',file=f)
print('# This file was generated by the command \"'+__file__+" "+" ".join(sys.argv[1:])+"' "+today, file=f)
print('#',file=f)

print('file "db/caenchassis.db" {',file=f)
print('    pattern { Cr, CrName, CScode}',file=f)
print('\t{ "%d", "%s", "#C%d" }'%(cratenum, crname, cratenum), file=f)
print('}',file=f)

print('file "db/caenhv.db" {',file=f)
print('\tpattern { Cr,   CrName,   Sl,   Ch,  CScode, ',end='',file=f)
print(', '.join([x for x in command_codes]),end='', file=f)
print(',',', '.join([x for x in alarm_limits])+"}", file=f)

for slot in slotlist:
    cscode = "#C%d"%(256*slot + cratenum)
    if HASPRIMARY:
        chans = CHANS+1
    else:
        chans = chans

    for chan in range(chans):
        values = ["%d"%cratenum, crname, "%.2d"%slot, "%.3d"%chan, cscode]
        values += ["S%d"%(command_codes[x]*256+chan) for x in command_codes]
        values += [str(alarm_limits[x]) for x in alarm_limits]
        rowstring = "\t{" + '"{}"'.format('", "'.join(values)) + "}"
        print(rowstring,file=f)

print('}',file=f)

f.close()
