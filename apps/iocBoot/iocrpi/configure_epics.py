#!/usr/bin/env python3

# Script to configure EPICS to correspond to the installed slots in the Lecroy Crate.

# 29.04.2021 (saw) Initial verison
# 18.05.2021 (saw) Add compatibility with 1471N cards with RLY property
# 02.06.2021 (saw) Look for LecroySlotList in scripts directory
#
#1.  Find the hostname (presumably rpiNN). Use the digits at the end of the host name
#    to determine a (hopefully) unique crate ID.
#2.  Write the HVAddCrate ioc command with this ID to a script to be called by st.cmd
#3.  Use ~/scripts/LecroySlotList.txt, which is written when the shim starts
#    to determine which slots are occupied in the mainframe
#4.  Use the crate ID and slot list to make an EPICS substituion file to define all the EPICS records

import socket
import re
import datetime
import sys

DEFAULTCRATE=1
SLOTLISTFILE="/home/pi/scripts/LecroySlotList.txt"
EPICSAPPROOT="/home/pi/epics/sbs-epics/apps"
STADDCRATE= "%s/iocBoot/iocrpi/hvaddcrate"%EPICSAPPROOT
DBDIR= "%s/db"%EPICSAPPROOT
SUBFILENAME="%s/LecroyHV.substitutions"%DBDIR
CRNAMEPREFIX="HAHV"

chan_counts = {
    "1461N": 12,
    "1461P": 12,
    "1471N": 8
}

alarm_limits = {
    "lolo": -50,
    "low": -25,
    "high": 25,
    "hihi": 50
}

def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

my_address = get_ip()

domain_name = socket.gethostbyaddr(my_address)[0]

print(domain_name.split(".",1)[0])

m=re.match('.*\D([\d]+)$', domain_name.split(".",1)[0])

cratenum=DEFAULTCRATE
if m:
    cratenum = int(m.group(1))

print("Crate number =",cratenum)

slotlist=[]
with open(SLOTLISTFILE,"r") as f:
    for line in f:
        m=re.match('^(\d+)\s+(\S+)\s+',line)
        if m:
            slot = int(m.group(1))
            modtype = m.group(2)
            if modtype in chan_counts:
                slotinfo = {"modtype": modtype,
                            "slot": slot,
                            "nchan": chan_counts[modtype]
                            }
                slotlist.append(slotinfo)
            else:
                print("Unknown module type",m.group(2),"in slot",slot)
                       
print(slotlist)        

hvaddcrate=open(STADDCRATE,"w")
print('HVAddCrate %d,"127.0.0.1"'%cratenum,file=hvaddcrate)

# Write out the substitution file

f = open(SUBFILENAME, "w")
today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") #get the data
crname = "%s%d"%(CRNAMEPREFIX,cratenum)

#print the preamble
print('#',file=f)
print('# This file was generated by the command \"'+__file__+" "+" ".join(sys.argv[1:])+"' "+today, file=f)
print('#',file=f)

print('file "db/lecroycrate.db" {',file=f)
print('pattern',file=f)
print('  { Cr, CrName}',file=f)
print('  { "'+str(cratenum)+'", "'+crname+'"}',file=f)
print('}',file=f)

print('file "db/lecroychan.db" {',file=f)
print('pattern',file=f)
print('  { Cr, CrName, Sl, Ch, ', end='',file=f)
print(', '.join([x for x in alarm_limits])+"}", file=f)

has1471 = False
for slotinfo in slotlist:
    if slotinfo["modtype"]=="1471N":
        has1471 = True
    slot = slotinfo["slot"]
    nchans = slotinfo["nchan"]
    for chan in range(nchans):
        values = ["%d"%cratenum, crname, "%.2d"%slot, "%.3d"%chan]
        values += [str(alarm_limits[x]) for x in alarm_limits]
        rowstring = "\t{" + '"{}"'.format('", "'.join(values)) + "}"
        print(rowstring,file=f)
print('}',file=f)

# Write substitution file for records that are unique to
# 1471N cards used for VDCs

if has1471:
    print('file "db/lecroychan1471.db" {',file=f)
    print('pattern',file=f)
    print('  { Cr, CrName, Sl, Ch }', file=f)

    for slotinfo in slotlist:
        if slotinfo["modtype"]=="1471N":
            slot = slotinfo["slot"]
            nchans = slotinfo["nchan"]
            for chan in range(nchans):
                values = ["%d"%cratenum, crname, "%.2d"%slot, "%.3d"%chan]
                rowstring = "\t{" + '"{}"'.format('", "'.join(values)) + "}"
                print(rowstring,file=f)
    print('}',file=f)

f.close()
